# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from proto import gigagenieM_pb2 as proto_dot_gigagenieM__pb2


class GigagenieMStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.serviceM = channel.stream_stream(
        '/kt.gigagenie.ai.m.GigagenieM/serviceM',
        request_serializer=proto_dot_gigagenieM__pb2.reqM.SerializeToString,
        response_deserializer=proto_dot_gigagenieM__pb2.resM.FromString,
        )


class GigagenieMServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def serviceM(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GigagenieMServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'serviceM': grpc.stream_stream_rpc_method_handler(
          servicer.serviceM,
          request_deserializer=proto_dot_gigagenieM__pb2.reqM.FromString,
          response_serializer=proto_dot_gigagenieM__pb2.resM.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kt.gigagenie.ai.m.GigagenieM', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
